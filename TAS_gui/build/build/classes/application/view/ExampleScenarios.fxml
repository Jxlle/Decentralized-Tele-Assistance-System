<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.scene.text.*?>
<?import javafx.scene.control.*?>
<?import java.lang.*?>
<?import javafx.scene.layout.*?>
<?import javafx.scene.layout.AnchorPane?>

<AnchorPane prefHeight="494.0" prefWidth="854.0" xmlns="http://javafx.com/javafx/8" xmlns:fx="http://javafx.com/fxml/1" fx:controller="application.view.controller.ExampleScenarios">
   <children>
      <Label layoutX="41.0" layoutY="40.0" text="Select a scenario for TAS application to run:" />
      <ToggleButton fx:id="btnWithoutAdaptation" layoutX="101.0" layoutY="93.0" mnemonicParsing="false" prefHeight="89.0" prefWidth="261.0" selected="true" text="Without Adaptation">
         <toggleGroup>
            <ToggleGroup fx:id="toggleGroupScenarios" />
         </toggleGroup>
      </ToggleButton>
      <ToggleButton fx:id="btnWithAdaptation" layoutX="497.0" layoutY="93.0" mnemonicParsing="false" prefHeight="89.0" prefWidth="261.0" text="With Adaptation" toggleGroup="$toggleGroupScenarios" />
      
      
      <Label layoutX="85.0" layoutY="201.0" text="Example Scenario without Adaptation">
         <font>
            <Font name="System Bold" size="16.0" />
         </font>
      </Label>
            <TextArea editable="false" layoutX="41.0" layoutY="238.0" prefHeight="221.0" prefWidth="380.0" text="In without adaptation scenario, we use the default behavior of ReSeP applications. The defaule behavior is, when a service fails then the workflow stops immediately and returns TimeoutError.  Using this scenario, we can easily determine that whenever an atomic service failed, the composite service is also failed." wrapText="true" />
      <Label layoutX="494.0" layoutY="201.0" text="Example Scenario with Adaptation">
         <font>
            <Font name="System Bold" size="16.0" />
         </font>
      </Label>
      <TextArea editable="false" layoutX="437.0" layoutY="238.0" prefHeight="221.0" prefWidth="380.0" text="In with adaptation scenario, we adapt the assistance service if invocation of a service fails. We set the configuration of the workflow to retry maximum three times if invocation of a service failes. Then, we use the WorkflowProbe to listen for the events. Whenever a service invocation failes, we remove that service from the workflow cache using WorkflowEffector provided by the assistance service. Then, we  check that whether there are more instances of the same service type available to be selcted by the workflow. If there are no more instances available, then we refresh the cache, which allows workflow to load all available services from the service registry to the cache. " wrapText="true" />
      
   </children>
</AnchorPane>
